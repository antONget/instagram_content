import asyncio
import random

from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, StateFilter, CommandObject, or_f
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup, default_state

from config_data.config import Config, load_config
import database.requests as rq
import keyboards.keyboard_main as kb
from filter.admin_filter import check_super_admin
from services.payments import create_payment, check_payment

from datetime import datetime
import logging

router = Router()
config: Config = load_config()


class Stage(StatesGroup):
    proposal = State()
    about_me = State()
    content = State()
    personal = State()


@router.message(CommandStart())
async def process_start_command(message: Message, state: FSMContext, command: CommandObject, bot: Bot) -> None:
    """
    –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ - –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å" –∏–ª–∏ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ "/start"
    :param message:
    :param state:
    :param command:
    :param bot:
    :return:
    """
    logging.info(f"process_start_command {message.chat.id}")
    await state.set_state(default_state)
    args = command.args
    # –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ
    if args:
        # –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å username
        if message.from_user.username:
            username = message.from_user.username
        else:
            username = 'None'
        # –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        data = {"tg_id": message.chat.id,
                "username": username}
        user_bd = await rq.add_user(data=data, token=args)
        if not user_bd:
            await bot.send_message(chat_id=config.tg_bot.support_id,
                                   text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î {data}')
        elif user_bd == 'change_link_resource':
            await bot.send_message(chat_id=config.tg_bot.support_id,
                                   text=f'–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ {data} - {args}')
            if await check_super_admin(telegram_id=message.chat.id):
                await message.answer(text=f'–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã üî•',
                                     reply_markup=kb.keyboards_main_admin())
            else:
                await message.answer(text=f'–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã üî•',
                                     reply_markup=kb.keyboards_main_user())
        elif user_bd == 'user_alredy_in_bd':
            await bot.send_message(chat_id=config.tg_bot.support_id,
                                   text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –ë–î —Å —Ç–∞–∫–æ–π —Å—Å—ã–ª–∫–æ–π {data} - {args}')
            if await check_super_admin(telegram_id=message.chat.id):
                await message.answer(text=f'–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã üî•',
                                     reply_markup=kb.keyboards_main_admin())
            else:
                await message.answer(text=f'–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã üî•',
                                     reply_markup=kb.keyboards_main_user())
    # –ø–µ—Ä–µ—Ö–æ–¥ –±–µ–∑ —Å—Å—ã–ª–∫–∏
    else:
        # –∞–¥–º–∏–Ω
        if await check_super_admin(telegram_id=message.chat.id):
            await message.answer(text=f'–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã üî•',
                                 reply_markup=kb.keyboards_main_admin())
            if message.from_user.username:
                username = message.from_user.username
            else:
                username = 'None'
            data = {"tg_id": message.chat.id,
                    "username": username,
                    "link_resource": "admin",
                    "link_personal": "admin"}
            await rq.add_user_admin(data=data)
        # –Ω–µ –∞–¥–º–∏–Ω
        else:
            await bot.send_message(chat_id=config.tg_bot.support_id,
                                   text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username}/{message.chat.id}'
                                        f' –ø–µ—Ä–µ—à–µ–ª –ø–æ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–µ')
            if message.from_user.username:
                username = message.from_user.username
            else:
                username = 'None'
            data = {"tg_id": message.chat.id,
                    "username": username}
            await rq.add_user(data=data, token='None')
            resources = await rq.get_resources()
            await message.answer(text='–í—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–µ. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—É—Ä—Å –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –Ω–∞ –Ω–µ–º –≤–∞—à–µ–≥–æ'
                                      ' –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
                                 reply_markup=kb.keyboards_attach_resources(list_resources=resources))


@router.callback_query(F.data.startswith('attach_resource_'))
async def attach_resource_user(callback: CallbackQuery, state: FSMContext):
    """
    –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–µ—Ä–µ—à–µ–¥—à–∏–º –≤ –±–æ—Ç –ø–æ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–µ —Ä–µ—Å—É—Ä—Å–∞
    :param callback:
    :param state:
    :return:
    """
    logging.info(f"attach_resource_user {callback.message.chat.id}")
    resource_id = int(callback.data.split('_')[-1])
    await state.update_data(resource_id=resource_id)
    info_resource = await rq.get_resource_id(resource_id=resource_id)
    await callback.message.edit_text(text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏.'
                                          f'<i>–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞:</i> {info_resource.name_resource}\n'
                                          f'<i>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ—Å—É—Ä—Å:</i> {info_resource.link_resource}\n\n'
                                          f'–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?',
                                     reply_markup=kb.keyboard_confirm_select_resource(),
                                     parse_mode='html')
    await callback.answer()


@router.callback_query(F.data == 'confirm_select_resource')
async def confirm_select_resource(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è –µ–≥–æ –∫ –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param callback:
    :param state:
    :return:
    """
    logging.info(f'confirm_select_resource {callback.message.chat.id} {state}')
    data = await state.get_data()
    resource_id = data.get('resource_id', None)
    if not resource_id:
        await callback.message.answer(text='–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç /start')
    resource_info = await rq.get_resource_id(resource_id=resource_id)
    await rq.set_user_link(tg_id=callback.message.chat.id,
                           link=resource_info.link_resource)
    try:
        await bot.delete_message(chat_id=callback.message.chat.id,
                                 message_id=callback.message.message_id)
    except:
        pass
    await callback.message.answer(text=f'–†–µ—Å—É—Ä—Å {resource_info.name_resource} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ –≤–∞—à–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é.\n'
                                       f'–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª',
                                  reply_markup=kb.keyboards_main_user())
    await callback.answer()


@router.callback_query(F.data == 'back_select_resource')
async def back_select_resource(callback: CallbackQuery, state: FSMContext):
    """
    –û–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫ –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞
    :param callback:
    :param state:
    :return:
    """
    logging.info(f'back_select_resource {callback.message.chat.id}')
    resources = await rq.get_resources()
    await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—É—Ä—Å –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è –µ–≥–æ –∫ –≤–∞—à–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é',
                                     reply_markup=kb.keyboards_attach_resources(list_resources=resources))
    await state.clear()
    await callback.answer()


@router.message(F.text == "–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞ üßë‚Äçüíª")
async def support(message: Message) -> None:
    """
    –°–æ–æ–±—â–∞–µ–º –∫–æ–º—É –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
    :param message:
    :return:
    """
    logging.info(f'support {message.chat.id}')
    await message.answer(text=f'–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º, —Ç–æ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è'
                              f' –∫ {config.tg_bot.support_username}')


@router.message(or_f(F.text == '–ü—É–±–ª–∏–∫–∞—Ü–∏—è', F.text == 'Reels', F.text == '–ò—Å—Ç–æ—Ä–∏—è'))
async def request_self(message: Message, state: FSMContext) -> None:
    """
    –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param message:
    :param state:
    :return:
    """
    logging.info(f'request_self {message.chat.id}')
    await state.clear()
    if message.text == '–ü—É–±–ª–∏–∫–∞—Ü–∏—è':
        await state.update_data(type_public=rq.OrderType.public)
        await message.answer(text=f'‚ùóÔ∏è–û—Å–Ω–æ–≤–Ω—É—é —á–∞—Å—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä–∞—è —É–≤–∏–¥–∏—Ç –≤–∞—à—É –∞–Ω–∫–µ—Ç—É, —Å–æ—Å—Ç–∞–≤—è—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–∏'
                                  f' –ø—Ä–æ–µ–∫—Ç–∞ MeetUp.\n\n'
                                  f'–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ ‚≠ê\n\n'
                                  f'–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–µ –∏–º—è, –≤–æ–∑—Ä–∞—Å—Ç, –≥–æ—Ä–æ–¥ –∏–ª–∏ —Å—Ç—Ä–∞–Ω—É –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è.'
                                  f' –£–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: —Ö–æ–±–±–∏, —É–≤–ª–µ—á–µ–Ω–∏—è, –ø—Ä–æ—Ñ–µ—Å—Å–∏—è,'
                                  f' –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è.\n\n'
                                  f'–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å, –∫–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –∏–ª–∏ —á–µ–º –∑–∞–Ω—è—Ç—å—Å—è –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ,'
                                  f' –¥–∞–π—Ç–µ –≤–æ–ª—é —Å–≤–æ–µ–π —Ñ–∞–Ω—Ç–∞–∑–∏–∏ üíó')
    elif message.text == 'Reels':
        await state.update_data(type_public=rq.OrderType.reels)
        await message.answer(text=f'üìé –§–æ—Ä–º–∞—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º–∏ –æ—Ö–≤–∞—Ç–∞–º–∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏‚ùó\n\n'
                                  f'–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ ‚≠ê\n\n'
                                  f'–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–µ –∏–º—è, –≤–æ–∑—Ä–∞—Å—Ç, –≥–æ—Ä–æ–¥ –∏–ª–∏ —Å—Ç—Ä–∞–Ω—É –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è.'
                                  f' –£–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: —Ö–æ–±–±–∏, —É–≤–ª–µ—á–µ–Ω–∏—è,'
                                  f' –ø—Ä–æ—Ñ–µ—Å—Å–∏—è, –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è.\n\n'
                                  f'–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å, –∫–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –∏–ª–∏ —á–µ–º –∑–∞–Ω—è—Ç—å—Å—è –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ,'
                                  f' –¥–∞–π—Ç–µ –≤–æ–ª—é —Å–≤–æ–µ–π —Ñ–∞–Ω—Ç–∞–∑–∏–∏ üíó')
    elif message.text == '–ò—Å—Ç–æ—Ä–∏—è':
        await state.update_data(type_public=rq.OrderType.stories)
        await message.answer(text=f'üìé –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ 24 —á–∞—Å–∞ ‚è∞\n\n'
                                  f'‚ùóÔ∏è–û—Å–Ω–æ–≤–Ω—É—é —á–∞—Å—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä–∞—è —É–≤–∏–¥–∏—Ç –≤–∞—à—É –∞–Ω–∫–µ—Ç—É, —Å–æ—Å—Ç–∞–≤—è—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–∏'
                                  f' –ø—Ä–æ–µ–∫—Ç–∞ MeetUp.\n\n'
                                  f'–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ ‚≠ê\n\n'
                                  f'–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–µ –∏–º—è, –≤–æ–∑—Ä–∞—Å—Ç, –≥–æ—Ä–æ–¥ –∏–ª–∏ —Å—Ç—Ä–∞–Ω—É –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è.'
                                  f' –£–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: —Ö–æ–±–±–∏, —É–≤–ª–µ—á–µ–Ω–∏—è, –ø—Ä–æ—Ñ–µ—Å—Å–∏—è,'
                                  f' –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è.\n\n'
                                  f'–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å, –∫–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –∏–ª–∏ —á–µ–º –∑–∞–Ω—è—Ç—å—Å—è –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ, –¥–∞–π—Ç–µ –≤–æ–ª—é'
                                  f' —Å–≤–æ–µ–π —Ñ–∞–Ω—Ç–∞–∑–∏–∏ üíó')
    await state.set_state(Stage.about_me)


@router.message(StateFilter(Stage.about_me))
async def request_content_about_me(message: Message, state: FSMContext):
    """
    –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–∞—Å—Å–∫–∞–∑–æ–º –æ —Å–µ–±–µ
    :param message:
    :param state:
    :return:
    """
    logging.info(f'request_content_about_me {message.chat.id}')
    if message.photo or message.document or message.video:
        await message.answer(text='–°–µ–π—á–∞—Å –ø—Ä–∏—à–ª–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.\n'
                                  '–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å, –∫–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –∏–ª–∏ —á–µ–º –∑–∞–Ω—è—Ç—å—Å—è –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ, –¥–∞–π—Ç–µ –≤–æ–ª—é'
                                  f' —Å–≤–æ–µ–π —Ñ–∞–Ω—Ç–∞–∑–∏–∏ üíó')
    about_me = message.text
    await state.update_data(about_me=about_me)
    await message.answer(text=f'üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–≤–æ—ë —Ñ–æ—Ç–æ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ) –∏–ª–∏ –≤–∏–¥–µ–æ (–±–æ–ª—å—à–µ –æ—Ö–≤–∞—Ç–æ–≤, —á–µ–º —É —Ñ–æ—Ç–æ),'
                              f' –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤ —Å–≤–æ–µ–π –∞–Ω–∫–µ—Ç–µ.')
    await state.set_state(Stage.content)
    await state.update_data(content=[])


@router.message(StateFilter(Stage.content), or_f(F.document, F.photo, F.video))
async def request_content_photo_text(message: Message, state: FSMContext):
    """
    –ü–æ–ª—É—á–∞–µ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    :param message:
    :param state:
    :return:
    """
    logging.info(f'request_content_photo_text {message.chat.id}')
    await asyncio.sleep(random.random())
    data = await state.get_data()
    list_content = data.get('content', [])
    if message.text:
        await message.answer(text=f'üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–≤–æ—ë —Ñ–æ—Ç–æ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ) –∏–ª–∏ –≤–∏–¥–µ–æ (–±–æ–ª—å—à–µ –æ—Ö–≤–∞—Ç–æ–≤, —á–µ–º —É —Ñ–æ—Ç–æ),'
                                  f' –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤ —Å–≤–æ–µ–π –∞–Ω–∫–µ—Ç–µ.')
        return
    elif message.photo:
        content = message.photo[-1].file_id
        if message.caption:
            caption = message.caption
        else:
            caption = 'None'
        await state.update_data(caption=caption)
        await state.update_data(type_content=rq.OrderContent.photo)
    elif message.video:
        content = message.video.file_id
        if message.caption:
            caption = message.caption
        else:
            caption = 'None'
        await state.update_data(caption=caption)
        await state.update_data(type_content=rq.OrderContent.video)
    elif message.document:
        content = message.document.file_id
        if message.caption:
            caption = message.caption
        else:
            caption = 'None'
        await state.update_data(caption=caption)
        await state.update_data(type_content=rq.OrderContent.document)
    list_content.append(content)
    await state.update_data(content=list_content)
    if len(list_content) == 1:
        await message.answer(text=f'üëâ–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–π –∏–Ω—Å—Ç–∞–≥—Ä–∞–º, –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.\n\n'
                                  f'ü´¢–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞—Ç—å—Å—è –∞–Ω–æ–Ω–∏–º–Ω—ã–º–∏, –ø—Ä–∏—à–ª–∏—Ç–µ –æ—Ç–≤–µ—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ¬´–ê–Ω–æ–Ω¬ª')
        await state.set_state(Stage.personal)


@router.message(StateFilter(Stage.personal))
async def request_pay(message: Message, state: FSMContext):
    """
    –ó–∞–ø—Ä–æ—Å –æ–ø–ª–∞—Ç—ã
    :param message:
    :param state:
    :return:
    """
    logging.info(f'request_pay {message.chat.id}')
    personal = message.text
    if not personal:
        await state.update_data(personal="Anon")
    else:
        await state.update_data(personal=personal)
    await rq.set_user_link_personal(tg_id=message.chat.id, link_personal=personal)
    data = await state.get_data()
    type_public = data['type_public']
    if type_public == rq.OrderType.public:
        amount = "350"
    elif type_public == rq.OrderType.reels:
        amount = "500"
    elif type_public == rq.OrderType.stories:
        amount = "300"
    payment_url, payment_id = create_payment(amount=amount, chat_id=message.chat.id, content=type_public)
    await message.answer(text=f'–û–ø–ª–∞—Ç–∏—Ç–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª ‚¨áÔ∏è –∏'
                              f' –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –ø–æ—Å—Ç—É–ø–∏—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É',
                         reply_markup=kb.keyboard_payment(payment_url=payment_url,
                                                          payment_id=payment_id,
                                                          amount=amount))
    await state.set_state(default_state)


@router.callback_query(F.data.startswith('payment_'))
async def check_pay(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã
    :param callback:
    :param state:
    :param bot:
    :return:
    """
    logging.info(f'check_pay {callback.message.chat.id}')
    payment_id = callback.data.split('_')[1]
    result = check_payment(payment_id=payment_id)
    if result == 'succeeded':
        await bot.delete_message(chat_id=callback.message.chat.id,
                                 message_id=callback.message.message_id)
        await callback.answer(text='–ü–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ', show_alert=True)
        data = await state.get_data()
        user_info = await rq.get_user_tg_id(tg_id=callback.message.chat.id)
        list_content = data["content"]
        if len(list_content) == 1:
            content = list_content[0]
        else:
            content = ','.join(list_content)
        data_order = {"status": rq.OrderStatus.payment,
                      "data_create": datetime.today().strftime('%H/%M/%S/%d/%m/%Y'),
                      "tg_client": callback.message.chat.id,
                      "link_resource": user_info.link_resource,
                      "about_me": data["about_me"],
                      "type_public": data["type_public"],
                      "type_content": data["type_content"],
                      "content": content,
                      "caption": data["caption"]}
        await rq.add_order(data=data_order)
        await callback.message.answer(text='–í–∞—à–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø—Ä–∏–Ω—è—Ç—ã ‚úÖ, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ã–ª–æ–∂–∏—Ç –∏—Ö –≤'
                                           ' –ø—Ä–æ—Ñ–∏–ª—å, –ø–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤–∞–º –ø—Ä–∏–¥—ë—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ üíå')
        list_admins = config.tg_bot.admin_ids.split(',')
        for admin in list_admins:
            try:
                await bot.send_message(chat_id=int(admin),
                                       text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username} –æ–ø–ª–∞—Ç–∏–ª —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ'
                                            f' {data["type_public"]}')
            except:
                pass
    else:
        await callback.message.answer(text='–ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª')
    await callback.answer()

